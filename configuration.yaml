# ================================
# configuration.yaml
# ================================
recorder:
  auto_purge: false

history:
  # This will record everything by default.

media_source:

stream:

frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
shell_command: !include shell_commands.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

conversation:
  intents: !include conversations.yaml # points to the flat list file
intent_script: !include intent_scripts.yaml # intent_script section only

# -----------------------------
# Input Helpers
# -----------------------------
input_number:
  distance_threshold:
    name: Distance Threshold
    initial: 10
    min: 1
    max: 1000
    step: 1
    unit_of_measurement: meters

  elevation_threshold:
    name: Elevation Threshold
    initial: 5
    min: 1
    max: 100
    step: 1

  main_light_warmth:
    name: Main Light Warmth
    initial: 400
    min: 250
    max: 500
    step: 1

  shore_charge_on_threshold:
    name: Charger Turn‑ON %
    icon: mdi:flash
    unit_of_measurement: "%"
    min: 0
    max: 100
    step: 1
    initial: 89 # default ON at 89 %

  shore_charge_off_threshold:
    name: Charger Turn‑OFF %
    icon: mdi:power-plug-off
    unit_of_measurement: "%"
    min: 0
    max: 100
    step: 1
    initial: 90 # default OFF at 90 %

input_text:
  previous_latitude:
  previous_longitude:
  previous_elevation:

input_boolean:
  speedtest_running:
    name: "Speedtest Running"
    initial: off

  shore_power_charger_enabled:
    name: "Shore Power Charger On/Off"
    initial: off

  # Add this to your configuration.yaml input_boolean section:
  power_saving_mode:
    name: "Power Saving Mode"
    icon: mdi:battery-heart-variant

# -----------------------------
# Template Sensors
# -----------------------------
template:
  - sensor:
      - name: "Battery Charging"
        unit_of_measurement: "W"
        state: >
          {% set power = states('sensor.olins_van_bms_power') | float(0) %}
          {{ power if power > 0 else 0 }}

      - name: "Battery Discharging"
        unit_of_measurement: "W"
        state: >
          {% set power = states('sensor.olins_van_bms_power') | float(0) %}
          {{ (power * -1) if power < 0 else 0 }}

      - name: "Starlink Downlink Throughput (Mbps)"
        unique_id: starlink_downlink_throughput_mbps
        unit_of_measurement: "Mbps"
        state: >
          {{ (states('sensor.starlink_downlink_throughput') | float(0) / 1000000) | round(2) }}

      - name: "Starlink Uplink Throughput (Mbps)"
        unique_id: starlink_uplink_throughput_mbps
        unit_of_measurement: "Mbps"
        state: >
          {{ (states('sensor.starlink_uplink_throughput') | float(0) / 1000000) | round(2) }}

      - name: "Total MPPT PV Power"
        unique_id: total_mppt_pv_power
        unit_of_measurement: "W"
        state: >
          {{ (states('sensor.a32_pro_mppt1_pv_power')|float(0) +
              states('sensor.a32_pro_mppt2_pv_power')|float(0))|round(2) }}

      - name: "Average MPPT Output Voltage"
        unique_id: average_mppt_output_voltage
        unit_of_measurement: "V"
        state: >
          {{ ((states('sensor.a32_pro_mppt1_output_voltage')|float(0) +
               states('sensor.a32_pro_mppt2_output_voltage')|float(0)) / 2)|round(2) }}

      - name: "Total MPPT Output Current"
        unique_id: total_mppt_output_current
        unit_of_measurement: "A"
        state: >
          {{ (states('sensor.a32_pro_mppt1_output_current')|float(0) +
              states('sensor.a32_pro_mppt2_output_current')|float(0))|round(2) }}

      # Changed from kWh to Wh by multiplying by 1000
      - name: "Total MPPT Yield Today"
        unique_id: total_mppt_yield_today
        unit_of_measurement: Wh
        state: >
          {% set mppt1_kwh = states('sensor.a32_pro_mppt1_yield_today')|float(0) %}
          {% set mppt2_kwh = states('sensor.a32_pro_mppt2_yield_today')|float(0) %}
          {{ ((mppt1_kwh + mppt2_kwh) * 1000) | round(2) }}

      - name: Propane Tank Percentage
        unique_id: propane_tank_percentage
        unit_of_measurement: "%"
        state: >
          {% set wall   = 3.175 %}
          {% set side   = 203.0 %}
          {% set R      = (304.0 - 2*wall) / 2 %}
          {% set H      = side + R %}
          {% set Ea = R  %}
          {% set Eb = R  %}
          {% set Ec = R / 2 %}

          {# ── liquid depth from the transducer (mm) ── #}
          {% set d_raw = states('sensor.pro_check_f317_tank_level') | float(0) %}
          {% set h_liq = d_raw - wall %}
          {% if h_liq < 0 %}{% set h_liq = 0 %}
          {% elif h_liq > H %}{% set h_liq = H %}{% endif %}

          {# ── reference volumes ── #}
          {% set V_hemi = (1/3) * pi * R**3 %}
          {% set V_cyl  = side * pi * R**2 %}
          {% set V_max  = 2*V_hemi + V_cyl %}

          {# ── volume at current depth ── #}
          {% if h_liq <= Ec %}
            {% set V_liq = pi*R**2 * ((2/3)*h_liq - (h_liq**3)/(3*Ec**2)) %}
          {% elif h_liq <= Ec + side %}
            {% set V_liq = V_hemi + (h_liq - Ec)*pi*R**2 %}
          {% else %}
            {% set h2 = h_liq - (Ec + side) %}
            {% set V_liq = V_hemi + V_cyl +
                            pi*R**2 * ((2/3)*h2 - (h2**3)/(3*Ec**2)) %}
          {% endif %}

          {# ── display percentage relative to the 80 % safety fill ── #}
          {{ (100 * V_liq / (0.8 * V_max)) | round(1) }}

      - name: Propane – Raw Distance
        unit_of_measurement: mm
        state: "{{ states('sensor.pro_check_f317_tank_level') | float(0) }}"

      - name: Propane – Liquid Depth
        unit_of_measurement: mm
        state: "{{ (states('sensor.pro_check_f317_tank_level') | float(0)) - 3.175 }}"

      - name: Propane – Liquid Volume
        unit_of_measurement: L
        state: >
          {% set pct = states('sensor.propane_tank_percentage') | float(0) %}
          {{ (pct / 100 * 0.8 * 21.0) | round(2) }}  {# 21 L theoretical #}

      # -----------------------------
      # Power Sensors (24 V or 12 V) = (current | abs) * voltage
      # -----------------------------
      - name: "Air Conditioning Power (24V)"
        unique_id: air_conditioning_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_4_current_24v_air_conditioning')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "All 24V Devices Power (24V)"
        unique_id: all_24v_devices_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_5_current_24v_24v_devices')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "All 12V Devices Power (24V)"
        unique_id: all_12v_devices_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_6_current_24v_12v_devices')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Inverter Power (24V)"
        unique_id: inverter_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_7_current_24v_inverter')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Alternator Charger Power (24V)"
        unique_id: alternator_charger_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_8_current_24v_alternator_charger')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Battery Heater Power (12V)"
        unique_id: battery_heater_power_12v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_13_current_12v_battery_heater')|float(0) %}
          {% set voltage = states('sensor.a32_pro_smart_battery_sense_12v_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Roof Fan Power (12V)"
        unique_id: roof_fan_power_12v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_14_current_12v_roof_fan')|float(0) %}
          {% set voltage = states('sensor.a32_pro_smart_battery_sense_12v_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Bed Motor Power (24V)"
        unique_id: bed_motor_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_15_current_24v_bed_motor')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: "Shore Power Charger Power (24V)"
        unique_id: shore_power_charger_power_24v
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set current = states('sensor.a32_pro_s5140_channel_16_current_24v_shore_power_charger')|float(0) %}
          {% set voltage = states('sensor.olins_van_bms_voltage')|float(0) %}
          {{ ((current | abs) * voltage)|round(2) }}

      - name: Roof Fan Direction
        state: >
          {% set d = state_attr('fan.ag_pro_roof_fan','direction') %}
          {{ 'Exhaust' if d == 'forward' else 'Intake' if d == 'reverse' else 'Unknown' }}

# -----------------------------
# Integration Sensors (Riemann Sum Integration)
# These sensors calculate cumulative energy (in Wh)
# -----------------------------
sensor:
  - platform: history_stats
    name: "Hydronic Heater Total On-Time"
    entity_id: switch.a32_pro_switch24_hydronic_heater
    state: "on"
    type: time
    start: "{{ as_datetime('2025-01-24 00:00:00') }}"
    end: "{{ now() }}"

  - platform: integration
    name: "Air Conditioning Energy (Wh)"
    unique_id: "air_conditioning_energy_wh"
    source: sensor.air_conditioning_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "All 24V Devices Energy (Wh)"
    unique_id: "all_24v_devices_energy_wh"
    source: sensor.all_24v_devices_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "All 12 Devices Energy (Wh)"
    unique_id: "all_12v_devices_energy_wh"
    source: sensor.all_12v_devices_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Inverter Energy (Wh)"
    unique_id: "inverter_energy_wh"
    source: sensor.inverter_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Alternator Charger Energy (Wh)"
    unique_id: "alternator_charger_energy_wh"
    source: sensor.alternator_charger_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Battery Heater Energy (Wh)"
    unique_id: "battery_heater_energy_wh"
    source: sensor.battery_heater_power_12v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Roof Fan Energy (Wh)"
    unique_id: "roof_fan_energy_wh"
    source: sensor.roof_fan_power_12v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Bed Motor Energy (Wh)"
    unique_id: "bed_motor_energy_wh"
    source: sensor.bed_motor_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "Shore Power Charger Energy (Wh)"
    unique_id: "shore_power_charger_energy_wh"
    source: sensor.shore_power_charger_power_24v
    method: trapezoidal
    round: 2

  - platform: integration
    name: "MPPT1 Energy (Wh)"
    unique_id: "mppt1_energy_wh"
    source: sensor.a32_pro_mppt1_pv_power
    method: trapezoidal
    round: 2

  - platform: integration
    name: "MPPT2 Energy (Wh)"
    unique_id: "mppt2_energy_wh"
    source: sensor.a32_pro_mppt2_pv_power
    method: trapezoidal
    round: 2
